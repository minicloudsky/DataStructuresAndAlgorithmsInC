#include "stdio.h"
struct s
{
    int x, *y; /* y: 结构中的成员是指向整型的指针 */
} *p; /* p: 指向结构的指针 */
int data[5]= {10, 20, 30, 40, 50,}; /* data: 整型数组 */
struct s array[5]=
{
    100, &data[0],
    200, &data[1],
    300, &data[2],
    400, &data[3],
    500, &data[4]
}; /* array: 结构数组 */
int main ( )
{
    p=array; /* 指针p指向结构数组的首地址 */
    printf ("For printer:\n");
    printf ("%d\n", p->x);// 100
    printf ("%d\n", (*p).x); // 100
    printf ("%d\n", *p->y); // 10
    printf ("%d\n", *(*p).y); // data[0] 的内存地址
    printf ("%d\n", ++p->x); // 200
    printf ("%d\n", (++p)->x); // 200
    printf ("%d\n", p->x++); // x下一个内存地址值, 20
    printf ("%d\n", p->x); // 200
    printf ("%d\n", ++ (*p->y)); // 21
    printf ("%d\n", ++ * p->y);  // 21
    printf ("%d\n", * ++ p->y); // 30
    printf ("%d\n", p->x); // 300
    printf ("%d\n", * (++p)->y); // 40
    printf ("%d\n", p->x);  // 400
    printf ("%d\n", * p->y ++);  // 41
    printf ("%d\n", p->x); // 40
    printf ("%d\n", * (p->y) ++); // 41
    printf ("%d\n", p->x); // 400
    printf ("%d\n", * p ++ ->y);   // 50
    printf ("%d\n", p->x); // 500
}

p->x /* 取结构指针p指向的结构的成员x的值，输出 100 */
(*p).x /* 取结构指针p的内容的成员x的值，功能同上，输出 100 */
*p->y /* 取结构指针p的指针成员y的内容，输出 10 */
*(*p).y /* 取结构指针p的内容的指针成员y的内容，功能同上，输出10 */
++p->x /* p所指的x加1，x先加1后再输出 101 ，p不加1 */
(++p)->x /* p先加1后再取x的值，x不加1，输出 200 */
p->x++ /* 先取x的值后x再加1，输出 200 */
p->x /* 输出 201 */
++(*p->y) /* p所指的y的内容先加1，输出 21 ，p不加1，y也不加1 */
++ *p->y /* 同上，由运算的结合性隐含了括号，输出 22 */
* ++p->y /* y先加1后再取y的内容，输出30，p不加1，y的内容不加1 */
p->x /* 输出 201 */
*(++p)->y /* p先加1后取所指y的内容，输出 30 */
p->x /* 输出 300 */
*p->y ++ /* 取p所指的y的内容，输出 30，然后p所指的y加1 */
p->x /* 输出 300 */
*(p->y)++ /* 取p所指的y的内容，输出 40，然后p所指的y加1 */
p->x /* 输出 300 */
*p++->y /* 取p所指的y的内容，输出 50，然后p加1 */
p->x /* 输出 400 */
*/
